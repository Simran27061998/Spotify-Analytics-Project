{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e001b27c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importing Pandas for data cleaning \n",
    "\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a41c312b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import raw data set\n",
    "\n",
    "df = pd.read_csv('spotify_history.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8225be84",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        spotify_track_uri                   ts    platform  ms_played  \\\n",
      "0  2J3n32GeLmMjwuAzyhcSNe  2013-07-08 02:44:34  web player       3185   \n",
      "1  1oHxIPqJyvAYHy0PVrDU98  2013-07-08 02:45:37  web player      61865   \n",
      "2  487OPlneJNni3NWC8SYqhW  2013-07-08 02:50:24  web player     285386   \n",
      "3  5IyblF777jLZj1vGHG2UD3  2013-07-08 02:52:40  web player     134022   \n",
      "4  0GgAAB0ZMllFhbNc3mAodO  2013-07-08 03:17:52  web player          0   \n",
      "\n",
      "                                      track_name        artist_name  \\\n",
      "0                            Say It, Just Say It       The Mowgli's   \n",
      "1  Drinking from the Bottle (feat. Tinie Tempah)      Calvin Harris   \n",
      "2                                    Born To Die       Lana Del Rey   \n",
      "3                               Off To The Races       Lana Del Rey   \n",
      "4                                      Half Mast  Empire Of The Sun   \n",
      "\n",
      "                           album_name reason_start reason_end  shuffle  \\\n",
      "0                Waiting For The Dawn     autoplay   clickrow    False   \n",
      "1                           18 Months     clickrow   clickrow    False   \n",
      "2  Born To Die - The Paradise Edition     clickrow    unknown    False   \n",
      "3  Born To Die - The Paradise Edition    trackdone   clickrow    False   \n",
      "4                  Walking On A Dream     clickrow    nextbtn    False   \n",
      "\n",
      "   skipped  \n",
      "0    False  \n",
      "1    False  \n",
      "2    False  \n",
      "3    False  \n",
      "4    False  \n"
     ]
    }
   ],
   "source": [
    "#Checking first few rows\n",
    "\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ce1f9be8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 149860 entries, 0 to 149859\n",
      "Data columns (total 11 columns):\n",
      " #   Column             Non-Null Count   Dtype \n",
      "---  ------             --------------   ----- \n",
      " 0   spotify_track_uri  149860 non-null  object\n",
      " 1   ts                 149860 non-null  object\n",
      " 2   platform           149860 non-null  object\n",
      " 3   ms_played          149860 non-null  int64 \n",
      " 4   track_name         149860 non-null  object\n",
      " 5   artist_name        149860 non-null  object\n",
      " 6   album_name         149860 non-null  object\n",
      " 7   reason_start       149717 non-null  object\n",
      " 8   reason_end         149743 non-null  object\n",
      " 9   shuffle            149860 non-null  bool  \n",
      " 10  skipped            149860 non-null  bool  \n",
      "dtypes: bool(2), int64(1), object(8)\n",
      "memory usage: 10.6+ MB\n"
     ]
    }
   ],
   "source": [
    "# Check dataset info\n",
    "\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9d0bbbe4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(149860, 11)\n"
     ]
    }
   ],
   "source": [
    "#Check the shape of the dataset\n",
    "\n",
    "print(df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1aba373c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Convert data type of timestamp column to datetime type\n",
    "\n",
    "df['ts'] = pd.to_datetime(df['ts'],errors='coerce')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d6085474",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 149860 entries, 0 to 149859\n",
      "Data columns (total 11 columns):\n",
      " #   Column             Non-Null Count   Dtype         \n",
      "---  ------             --------------   -----         \n",
      " 0   spotify_track_uri  149860 non-null  object        \n",
      " 1   ts                 149860 non-null  datetime64[ns]\n",
      " 2   platform           149860 non-null  object        \n",
      " 3   ms_played          149860 non-null  int64         \n",
      " 4   track_name         149860 non-null  object        \n",
      " 5   artist_name        149860 non-null  object        \n",
      " 6   album_name         149860 non-null  object        \n",
      " 7   reason_start       149717 non-null  object        \n",
      " 8   reason_end         149743 non-null  object        \n",
      " 9   shuffle            149860 non-null  bool          \n",
      " 10  skipped            149860 non-null  bool          \n",
      "dtypes: bool(2), datetime64[ns](1), int64(1), object(7)\n",
      "memory usage: 10.6+ MB\n"
     ]
    }
   ],
   "source": [
    "#Check Coversion\n",
    "\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a10804e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "#Check if any values failed to parse\n",
    " \n",
    "failed = df['ts'].isna().sum()\n",
    "\n",
    "print(failed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "de1982bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Extracting date and time components \n",
    "\n",
    "df['date'] = df['ts'].dt.date\n",
    "df['time'] = df['ts'].dt.time\n",
    "df['month'] = df['ts'].dt.month\n",
    "df['year'] = df['ts'].dt.year\n",
    "df['quater'] = df['ts'].dt.quarter\n",
    "df['hour'] = df['ts'].dt.hour\n",
    "df['day_name']= df['ts'].dt.day_name()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f6eebdd8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#create new column for weekend/weekday\n",
    "\n",
    "df['type_of_day'] = df['day_name'].apply(\n",
    "    lambda day: 'Weekend' if day in ['Saturday', 'Sunday'] else 'Weekday'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7e701a20",
   "metadata": {},
   "outputs": [],
   "source": [
    "#create new column for time_of_the_day\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "df['time_of_the_day'] = np.where(df['hour'].between(5,11),'Morning',\n",
    "                        np.where(df['hour'].between(12,16),'Afternoon',\n",
    "                        np.where(df['hour'].between(17,20),'Evening','Night')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1fa423a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Cleanup text columns\n",
    "\n",
    "text_columns = ['artist_name','album_name','track_name','platform','reason-start','reason_end','shuffle','skipped'\n",
    "                ,'day_name','type_of_day','time_of_the_day']\n",
    "\n",
    "for col in text_columns:           # loop through all the columns you want to normalize\n",
    "    if col in df.columns:          # only proceed if the column actually exists in the DataFrame.\n",
    "        df[col] = df[col].fillna('unknown').astype(str).str.lower().str.strip().str.replace(' ',' ',regex=True) \n",
    "\n",
    "        # replace NaN\n",
    "        # ensure text type\n",
    "        # lowercase\n",
    "        #remove leading/trailing spaces\n",
    "        # collapse double spaces"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "19b129ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "spotify_track_uri      0\n",
       "ts                     0\n",
       "platform               0\n",
       "ms_played              0\n",
       "track_name             0\n",
       "artist_name            0\n",
       "album_name             0\n",
       "reason_start         143\n",
       "reason_end             0\n",
       "shuffle                0\n",
       "skipped                0\n",
       "date                   0\n",
       "time                   0\n",
       "month                  0\n",
       "year                   0\n",
       "quater                 0\n",
       "hour                   0\n",
       "day_name               0\n",
       "type_of_day            0\n",
       "time_of_the_day        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check for null values in columns\n",
    "\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "6f5bb779",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "spotify_track_uri    0\n",
       "ts                   0\n",
       "platform             0\n",
       "ms_played            0\n",
       "track_name           0\n",
       "artist_name          0\n",
       "album_name           0\n",
       "reason_start         0\n",
       "reason_end           0\n",
       "shuffle              0\n",
       "skipped              0\n",
       "date                 0\n",
       "time                 0\n",
       "month                0\n",
       "year                 0\n",
       "quater               0\n",
       "hour                 0\n",
       "day_name             0\n",
       "type_of_day          0\n",
       "time_of_the_day      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Fill null values with 'unknown'\n",
    "\n",
    "df['reason_start'] = df['reason_start'].fillna('unknown')\n",
    "df['reason_end'] = df['reason_end'].fillna('unknown')\n",
    "\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1ebf985b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.int64(3733)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check how many rows have 0 ms_played\n",
    "\n",
    "(df['ms_played'] == 0).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d8033367",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.int64(0)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Remove rows having 0 ms_played and reset index to avoid gaps\n",
    "\n",
    "df = df[df['ms_played'] > 0].reset_index(drop=True)\n",
    "\n",
    "(df['ms_played'] == 0).sum()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "0d602c48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.int64(988)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check for duplicates\n",
    "\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a5cf1362",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.int64(0)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#remove duplicates and reset the index\n",
    "\n",
    "df= df.drop_duplicates().reset_index(drop=True)\n",
    "\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "95cb8095",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>spotify_track_uri</th>\n",
       "      <th>ts</th>\n",
       "      <th>platform</th>\n",
       "      <th>ms_played</th>\n",
       "      <th>track_name</th>\n",
       "      <th>artist_name</th>\n",
       "      <th>album_name</th>\n",
       "      <th>reason_start</th>\n",
       "      <th>reason_end</th>\n",
       "      <th>shuffle</th>\n",
       "      <th>...</th>\n",
       "      <th>time</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>quater</th>\n",
       "      <th>hour</th>\n",
       "      <th>day_name</th>\n",
       "      <th>type_of_day</th>\n",
       "      <th>time_of_the_day</th>\n",
       "      <th>minutes_played</th>\n",
       "      <th>hours_played</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2J3n32GeLmMjwuAzyhcSNe</td>\n",
       "      <td>2013-07-08 02:44:34</td>\n",
       "      <td>web player</td>\n",
       "      <td>3185</td>\n",
       "      <td>say it, just say it</td>\n",
       "      <td>the mowgli's</td>\n",
       "      <td>waiting for the dawn</td>\n",
       "      <td>autoplay</td>\n",
       "      <td>clickrow</td>\n",
       "      <td>false</td>\n",
       "      <td>...</td>\n",
       "      <td>02:44:34</td>\n",
       "      <td>7</td>\n",
       "      <td>2013</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>monday</td>\n",
       "      <td>weekday</td>\n",
       "      <td>night</td>\n",
       "      <td>0.053083</td>\n",
       "      <td>0.000885</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1oHxIPqJyvAYHy0PVrDU98</td>\n",
       "      <td>2013-07-08 02:45:37</td>\n",
       "      <td>web player</td>\n",
       "      <td>61865</td>\n",
       "      <td>drinking from the bottle (feat. tinie tempah)</td>\n",
       "      <td>calvin harris</td>\n",
       "      <td>18 months</td>\n",
       "      <td>clickrow</td>\n",
       "      <td>clickrow</td>\n",
       "      <td>false</td>\n",
       "      <td>...</td>\n",
       "      <td>02:45:37</td>\n",
       "      <td>7</td>\n",
       "      <td>2013</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>monday</td>\n",
       "      <td>weekday</td>\n",
       "      <td>night</td>\n",
       "      <td>1.031083</td>\n",
       "      <td>0.017185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>487OPlneJNni3NWC8SYqhW</td>\n",
       "      <td>2013-07-08 02:50:24</td>\n",
       "      <td>web player</td>\n",
       "      <td>285386</td>\n",
       "      <td>born to die</td>\n",
       "      <td>lana del rey</td>\n",
       "      <td>born to die - the paradise edition</td>\n",
       "      <td>clickrow</td>\n",
       "      <td>unknown</td>\n",
       "      <td>false</td>\n",
       "      <td>...</td>\n",
       "      <td>02:50:24</td>\n",
       "      <td>7</td>\n",
       "      <td>2013</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>monday</td>\n",
       "      <td>weekday</td>\n",
       "      <td>night</td>\n",
       "      <td>4.756433</td>\n",
       "      <td>0.079274</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5IyblF777jLZj1vGHG2UD3</td>\n",
       "      <td>2013-07-08 02:52:40</td>\n",
       "      <td>web player</td>\n",
       "      <td>134022</td>\n",
       "      <td>off to the races</td>\n",
       "      <td>lana del rey</td>\n",
       "      <td>born to die - the paradise edition</td>\n",
       "      <td>trackdone</td>\n",
       "      <td>clickrow</td>\n",
       "      <td>false</td>\n",
       "      <td>...</td>\n",
       "      <td>02:52:40</td>\n",
       "      <td>7</td>\n",
       "      <td>2013</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>monday</td>\n",
       "      <td>weekday</td>\n",
       "      <td>night</td>\n",
       "      <td>2.233700</td>\n",
       "      <td>0.037228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>50VNvhzyaSplJCKWchN7a8</td>\n",
       "      <td>2013-07-08 03:17:52</td>\n",
       "      <td>web player</td>\n",
       "      <td>63485</td>\n",
       "      <td>impossible</td>\n",
       "      <td>james arthur</td>\n",
       "      <td>impossible</td>\n",
       "      <td>clickrow</td>\n",
       "      <td>clickrow</td>\n",
       "      <td>false</td>\n",
       "      <td>...</td>\n",
       "      <td>03:17:52</td>\n",
       "      <td>7</td>\n",
       "      <td>2013</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>monday</td>\n",
       "      <td>weekday</td>\n",
       "      <td>night</td>\n",
       "      <td>1.058083</td>\n",
       "      <td>0.017635</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145134</th>\n",
       "      <td>4Fz1WWr5o0OrlIcZxcyZtK</td>\n",
       "      <td>2024-12-15 23:06:19</td>\n",
       "      <td>android</td>\n",
       "      <td>1247</td>\n",
       "      <td>on the way home</td>\n",
       "      <td>john mayer</td>\n",
       "      <td>paradise valley</td>\n",
       "      <td>fwdbtn</td>\n",
       "      <td>fwdbtn</td>\n",
       "      <td>true</td>\n",
       "      <td>...</td>\n",
       "      <td>23:06:19</td>\n",
       "      <td>12</td>\n",
       "      <td>2024</td>\n",
       "      <td>4</td>\n",
       "      <td>23</td>\n",
       "      <td>sunday</td>\n",
       "      <td>weekend</td>\n",
       "      <td>night</td>\n",
       "      <td>0.020783</td>\n",
       "      <td>0.000346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145135</th>\n",
       "      <td>0qHMhBZqYb99yhX9BHcIkV</td>\n",
       "      <td>2024-12-15 23:06:21</td>\n",
       "      <td>android</td>\n",
       "      <td>1515</td>\n",
       "      <td>magical mystery tour - remastered 2009</td>\n",
       "      <td>the beatles</td>\n",
       "      <td>magical mystery tour</td>\n",
       "      <td>fwdbtn</td>\n",
       "      <td>fwdbtn</td>\n",
       "      <td>true</td>\n",
       "      <td>...</td>\n",
       "      <td>23:06:21</td>\n",
       "      <td>12</td>\n",
       "      <td>2024</td>\n",
       "      <td>4</td>\n",
       "      <td>23</td>\n",
       "      <td>sunday</td>\n",
       "      <td>weekend</td>\n",
       "      <td>night</td>\n",
       "      <td>0.025250</td>\n",
       "      <td>0.000421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145136</th>\n",
       "      <td>0HHdujGjOZChTrl8lJWEIq</td>\n",
       "      <td>2024-12-15 23:06:22</td>\n",
       "      <td>android</td>\n",
       "      <td>1283</td>\n",
       "      <td>stop this train - live at the nokia theatre, l...</td>\n",
       "      <td>john mayer</td>\n",
       "      <td>where the light is: john mayer live in los ang...</td>\n",
       "      <td>fwdbtn</td>\n",
       "      <td>fwdbtn</td>\n",
       "      <td>true</td>\n",
       "      <td>...</td>\n",
       "      <td>23:06:22</td>\n",
       "      <td>12</td>\n",
       "      <td>2024</td>\n",
       "      <td>4</td>\n",
       "      <td>23</td>\n",
       "      <td>sunday</td>\n",
       "      <td>weekend</td>\n",
       "      <td>night</td>\n",
       "      <td>0.021383</td>\n",
       "      <td>0.000356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145137</th>\n",
       "      <td>7peh6LUcdNPcMdrSH4JPsM</td>\n",
       "      <td>2024-12-15 23:06:23</td>\n",
       "      <td>android</td>\n",
       "      <td>1306</td>\n",
       "      <td>i don't trust myself (with loving you)</td>\n",
       "      <td>john mayer</td>\n",
       "      <td>continuum</td>\n",
       "      <td>fwdbtn</td>\n",
       "      <td>fwdbtn</td>\n",
       "      <td>true</td>\n",
       "      <td>...</td>\n",
       "      <td>23:06:23</td>\n",
       "      <td>12</td>\n",
       "      <td>2024</td>\n",
       "      <td>4</td>\n",
       "      <td>23</td>\n",
       "      <td>sunday</td>\n",
       "      <td>weekend</td>\n",
       "      <td>night</td>\n",
       "      <td>0.021767</td>\n",
       "      <td>0.000363</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145138</th>\n",
       "      <td>6iGU74CwXuT4XVepjc9Emf</td>\n",
       "      <td>2024-12-15 23:06:25</td>\n",
       "      <td>android</td>\n",
       "      <td>1893</td>\n",
       "      <td>god only knows - mono</td>\n",
       "      <td>the beach boys</td>\n",
       "      <td>pet sounds</td>\n",
       "      <td>fwdbtn</td>\n",
       "      <td>fwdbtn</td>\n",
       "      <td>true</td>\n",
       "      <td>...</td>\n",
       "      <td>23:06:25</td>\n",
       "      <td>12</td>\n",
       "      <td>2024</td>\n",
       "      <td>4</td>\n",
       "      <td>23</td>\n",
       "      <td>sunday</td>\n",
       "      <td>weekend</td>\n",
       "      <td>night</td>\n",
       "      <td>0.031550</td>\n",
       "      <td>0.000526</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>145139 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             spotify_track_uri                  ts    platform  ms_played  \\\n",
       "0       2J3n32GeLmMjwuAzyhcSNe 2013-07-08 02:44:34  web player       3185   \n",
       "1       1oHxIPqJyvAYHy0PVrDU98 2013-07-08 02:45:37  web player      61865   \n",
       "2       487OPlneJNni3NWC8SYqhW 2013-07-08 02:50:24  web player     285386   \n",
       "3       5IyblF777jLZj1vGHG2UD3 2013-07-08 02:52:40  web player     134022   \n",
       "4       50VNvhzyaSplJCKWchN7a8 2013-07-08 03:17:52  web player      63485   \n",
       "...                        ...                 ...         ...        ...   \n",
       "145134  4Fz1WWr5o0OrlIcZxcyZtK 2024-12-15 23:06:19     android       1247   \n",
       "145135  0qHMhBZqYb99yhX9BHcIkV 2024-12-15 23:06:21     android       1515   \n",
       "145136  0HHdujGjOZChTrl8lJWEIq 2024-12-15 23:06:22     android       1283   \n",
       "145137  7peh6LUcdNPcMdrSH4JPsM 2024-12-15 23:06:23     android       1306   \n",
       "145138  6iGU74CwXuT4XVepjc9Emf 2024-12-15 23:06:25     android       1893   \n",
       "\n",
       "                                               track_name     artist_name  \\\n",
       "0                                     say it, just say it    the mowgli's   \n",
       "1           drinking from the bottle (feat. tinie tempah)   calvin harris   \n",
       "2                                             born to die    lana del rey   \n",
       "3                                        off to the races    lana del rey   \n",
       "4                                              impossible    james arthur   \n",
       "...                                                   ...             ...   \n",
       "145134                                    on the way home      john mayer   \n",
       "145135             magical mystery tour - remastered 2009     the beatles   \n",
       "145136  stop this train - live at the nokia theatre, l...      john mayer   \n",
       "145137             i don't trust myself (with loving you)      john mayer   \n",
       "145138                              god only knows - mono  the beach boys   \n",
       "\n",
       "                                               album_name reason_start  \\\n",
       "0                                    waiting for the dawn     autoplay   \n",
       "1                                               18 months     clickrow   \n",
       "2                      born to die - the paradise edition     clickrow   \n",
       "3                      born to die - the paradise edition    trackdone   \n",
       "4                                              impossible     clickrow   \n",
       "...                                                   ...          ...   \n",
       "145134                                    paradise valley       fwdbtn   \n",
       "145135                               magical mystery tour       fwdbtn   \n",
       "145136  where the light is: john mayer live in los ang...       fwdbtn   \n",
       "145137                                          continuum       fwdbtn   \n",
       "145138                                         pet sounds       fwdbtn   \n",
       "\n",
       "       reason_end shuffle  ...      time month  year  quater  hour  day_name  \\\n",
       "0        clickrow   false  ...  02:44:34     7  2013       3     2    monday   \n",
       "1        clickrow   false  ...  02:45:37     7  2013       3     2    monday   \n",
       "2         unknown   false  ...  02:50:24     7  2013       3     2    monday   \n",
       "3        clickrow   false  ...  02:52:40     7  2013       3     2    monday   \n",
       "4        clickrow   false  ...  03:17:52     7  2013       3     3    monday   \n",
       "...           ...     ...  ...       ...   ...   ...     ...   ...       ...   \n",
       "145134     fwdbtn    true  ...  23:06:19    12  2024       4    23    sunday   \n",
       "145135     fwdbtn    true  ...  23:06:21    12  2024       4    23    sunday   \n",
       "145136     fwdbtn    true  ...  23:06:22    12  2024       4    23    sunday   \n",
       "145137     fwdbtn    true  ...  23:06:23    12  2024       4    23    sunday   \n",
       "145138     fwdbtn    true  ...  23:06:25    12  2024       4    23    sunday   \n",
       "\n",
       "        type_of_day time_of_the_day minutes_played hours_played  \n",
       "0           weekday           night       0.053083     0.000885  \n",
       "1           weekday           night       1.031083     0.017185  \n",
       "2           weekday           night       4.756433     0.079274  \n",
       "3           weekday           night       2.233700     0.037228  \n",
       "4           weekday           night       1.058083     0.017635  \n",
       "...             ...             ...            ...          ...  \n",
       "145134      weekend           night       0.020783     0.000346  \n",
       "145135      weekend           night       0.025250     0.000421  \n",
       "145136      weekend           night       0.021383     0.000356  \n",
       "145137      weekend           night       0.021767     0.000363  \n",
       "145138      weekend           night       0.031550     0.000526  \n",
       "\n",
       "[145139 rows x 22 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Add mintues_played & hours_played columns\n",
    "\n",
    "df['minutes_played'] = df['ms_played'] / 60000 \n",
    "df['hours_played'] = df['minutes_played'] / 60\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "3afc8e89",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "145139"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Load csv file into mysql\n",
    "\n",
    "from sqlalchemy import create_engine\n",
    "\n",
    "# Replace with your own MySQL connection details\n",
    "engine = create_engine(\"mysql+pymysql://root:27Simran$@localhost:3306/spotify_db\")\n",
    "\n",
    "# Export cleaned dataframe to a base table in MySQL\n",
    "df.to_sql(\"spotify_raw\", con=engine, if_exists=\"replace\", index=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f0f5f969",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Load data into power bi\n",
    "\n",
    "df.to_csv(\"spotify_raw_data.csv\", index=False)  # index=False avoids writing row numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "0b94ab10",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145139\n"
     ]
    }
   ],
   "source": [
    "df_check = pd.read_sql('SELECT COUNT(*) AS row_count FROM spotify_raw', con=engine)\n",
    "print(df_check['row_count'][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "afe744db",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotify_track_uri\n",
      "003vvx7Niy0yvhvHt4a68B    36\n",
      "00CqEmnPLFKDhAb3cuu6Cs     2\n",
      "00GfiT5AxTNSDQihPeMRkM     5\n",
      "00V8KJuZ0a089fa25Lc9t7     2\n",
      "00bScuvzFpyRMGWlgfu5sp    16\n",
      "                          ..\n",
      "7zlF2G7QFPdj9lmmGNVuNq     5\n",
      "7zmMQkL7IYtzlA8NkrA68k    10\n",
      "7zrpoAJte9o12TzawqgdD0    19\n",
      "7zscdQe9CjzXnqT3P1Ey7K    67\n",
      "7zuQbOXtADtQc0dBwSwt5Q     2\n",
      "Length: 7711, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Group by spotify_track_uri and count occurrences\n",
    "duplicate_counts = df.groupby('spotify_track_uri').size()\n",
    "\n",
    "# Filter only those that appear more than once\n",
    "duplicate_counts = duplicate_counts[duplicate_counts > 1]\n",
    "\n",
    "print(duplicate_counts)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "5c06b83f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            spotify_track_uri                  ts platform  ms_played  \\\n",
      "5780   2mem83091yDpiVnZd7l3hz 2016-10-12 07:29:14  android     195666   \n",
      "5782   4vw2HFJXdHtjauDfb7nqRi 2016-10-12 07:33:15  android     184526   \n",
      "5849   4vw2HFJXdHtjauDfb7nqRi 2016-10-12 23:36:36  android      86007   \n",
      "5875   4vw2HFJXdHtjauDfb7nqRi 2016-10-13 06:44:55  android       2522   \n",
      "8975   4vw2HFJXdHtjauDfb7nqRi 2016-12-29 19:41:22  android     201933   \n",
      "11780  4vw2HFJXdHtjauDfb7nqRi 2017-02-10 20:28:55  android     201933   \n",
      "14089  4vw2HFJXdHtjauDfb7nqRi 2017-04-08 20:36:44  android       2306   \n",
      "14852  4vw2HFJXdHtjauDfb7nqRi 2017-04-20 19:04:23  android     201933   \n",
      "15461  4vw2HFJXdHtjauDfb7nqRi 2017-04-29 12:46:52  android     201933   \n",
      "16084  4vw2HFJXdHtjauDfb7nqRi 2017-05-16 06:19:07  android     201933   \n",
      "16298  4vw2HFJXdHtjauDfb7nqRi 2017-05-21 17:43:34      ios     201933   \n",
      "16319  4vw2HFJXdHtjauDfb7nqRi 2017-05-21 18:45:47      ios     201933   \n",
      "17577  4vw2HFJXdHtjauDfb7nqRi 2017-06-22 09:59:18  android     201933   \n",
      "17596  4vw2HFJXdHtjauDfb7nqRi 2017-06-22 10:12:16  android     201933   \n",
      "17846  4vw2HFJXdHtjauDfb7nqRi 2017-06-26 10:58:06  android     201933   \n",
      "18033  4vw2HFJXdHtjauDfb7nqRi 2017-06-29 15:26:35  android     201933   \n",
      "19579  4vw2HFJXdHtjauDfb7nqRi 2017-07-08 16:54:35  android       1590   \n",
      "20946  4vw2HFJXdHtjauDfb7nqRi 2017-07-20 19:17:24  android       4315   \n",
      "20948  4vw2HFJXdHtjauDfb7nqRi 2017-07-20 19:20:50  android     201933   \n",
      "21382  4vw2HFJXdHtjauDfb7nqRi 2017-07-27 20:11:01  android     201933   \n",
      "25023  4vw2HFJXdHtjauDfb7nqRi 2017-09-03 11:02:15  android        170   \n",
      "26563  4vw2HFJXdHtjauDfb7nqRi 2017-09-06 22:13:34  android        998   \n",
      "27252  4vw2HFJXdHtjauDfb7nqRi 2017-09-08 02:59:55  android     201933   \n",
      "\n",
      "              track_name        artist_name         album_name reason_start  \\\n",
      "5780       aca entre nos  vicente fernández  que de raro tiene     clickrow   \n",
      "5782   que de raro tiene  vicente fernández  que de raro tiene       fwdbtn   \n",
      "5849   que de raro tiene  vicente fernández  que de raro tiene       fwdbtn   \n",
      "5875   que de raro tiene  vicente fernández  que de raro tiene       fwdbtn   \n",
      "8975   que de raro tiene  vicente fernández  que de raro tiene    trackdone   \n",
      "11780  que de raro tiene  vicente fernández  que de raro tiene    trackdone   \n",
      "14089  que de raro tiene  vicente fernández  que de raro tiene       fwdbtn   \n",
      "14852  que de raro tiene  vicente fernández  que de raro tiene    trackdone   \n",
      "15461  que de raro tiene  vicente fernández  que de raro tiene    trackdone   \n",
      "16084  que de raro tiene  vicente fernández  que de raro tiene       fwdbtn   \n",
      "16298  que de raro tiene  vicente fernández  que de raro tiene    trackdone   \n",
      "16319  que de raro tiene  vicente fernández  que de raro tiene    trackdone   \n",
      "17577  que de raro tiene  vicente fernández  que de raro tiene    trackdone   \n",
      "17596  que de raro tiene  vicente fernández  que de raro tiene    trackdone   \n",
      "17846  que de raro tiene  vicente fernández  que de raro tiene    trackdone   \n",
      "18033  que de raro tiene  vicente fernández  que de raro tiene    trackdone   \n",
      "19579  que de raro tiene  vicente fernández  que de raro tiene       fwdbtn   \n",
      "20946  que de raro tiene  vicente fernández  que de raro tiene       fwdbtn   \n",
      "20948  que de raro tiene  vicente fernández  que de raro tiene      backbtn   \n",
      "21382  que de raro tiene  vicente fernández  que de raro tiene    trackdone   \n",
      "25023  que de raro tiene  vicente fernández  que de raro tiene       fwdbtn   \n",
      "26563  que de raro tiene  vicente fernández  que de raro tiene       fwdbtn   \n",
      "27252  que de raro tiene  vicente fernández  que de raro tiene       fwdbtn   \n",
      "\n",
      "      reason_end shuffle  ...  \\\n",
      "5780   trackdone    true  ...   \n",
      "5782      fwdbtn    true  ...   \n",
      "5849      fwdbtn    true  ...   \n",
      "5875      fwdbtn    true  ...   \n",
      "8975   trackdone    true  ...   \n",
      "11780  trackdone    true  ...   \n",
      "14089     fwdbtn    true  ...   \n",
      "14852  trackdone    true  ...   \n",
      "15461  trackdone    true  ...   \n",
      "16084  trackdone    true  ...   \n",
      "16298  trackdone    true  ...   \n",
      "16319  trackdone    true  ...   \n",
      "17577  trackdone    true  ...   \n",
      "17596  trackdone    true  ...   \n",
      "17846  trackdone    true  ...   \n",
      "18033  trackdone    true  ...   \n",
      "19579     fwdbtn    true  ...   \n",
      "20946     fwdbtn    true  ...   \n",
      "20948  trackdone    true  ...   \n",
      "21382  trackdone    true  ...   \n",
      "25023     fwdbtn    true  ...   \n",
      "26563     fwdbtn   false  ...   \n",
      "27252  trackdone    true  ...   \n",
      "\n",
      "                                                     key track_id album_id  \\\n",
      "5780   aca entre nos||que de raro tiene||vicente fern...      NaN   1404.0   \n",
      "5782   que de raro tiene||que de raro tiene||vicente ...      NaN   1404.0   \n",
      "5849   que de raro tiene||que de raro tiene||vicente ...      NaN   1404.0   \n",
      "5875   que de raro tiene||que de raro tiene||vicente ...      NaN   1404.0   \n",
      "8975   que de raro tiene||que de raro tiene||vicente ...      NaN   1404.0   \n",
      "11780  que de raro tiene||que de raro tiene||vicente ...      NaN   1404.0   \n",
      "14089  que de raro tiene||que de raro tiene||vicente ...      NaN   1404.0   \n",
      "14852  que de raro tiene||que de raro tiene||vicente ...      NaN   1404.0   \n",
      "15461  que de raro tiene||que de raro tiene||vicente ...      NaN   1404.0   \n",
      "16084  que de raro tiene||que de raro tiene||vicente ...      NaN   1404.0   \n",
      "16298  que de raro tiene||que de raro tiene||vicente ...      NaN   1404.0   \n",
      "16319  que de raro tiene||que de raro tiene||vicente ...      NaN   1404.0   \n",
      "17577  que de raro tiene||que de raro tiene||vicente ...      NaN   1404.0   \n",
      "17596  que de raro tiene||que de raro tiene||vicente ...      NaN   1404.0   \n",
      "17846  que de raro tiene||que de raro tiene||vicente ...      NaN   1404.0   \n",
      "18033  que de raro tiene||que de raro tiene||vicente ...      NaN   1404.0   \n",
      "19579  que de raro tiene||que de raro tiene||vicente ...      NaN   1404.0   \n",
      "20946  que de raro tiene||que de raro tiene||vicente ...      NaN   1404.0   \n",
      "20948  que de raro tiene||que de raro tiene||vicente ...      NaN   1404.0   \n",
      "21382  que de raro tiene||que de raro tiene||vicente ...      NaN   1404.0   \n",
      "25023  que de raro tiene||que de raro tiene||vicente ...      NaN   1404.0   \n",
      "26563  que de raro tiene||que de raro tiene||vicente ...      NaN   1404.0   \n",
      "27252  que de raro tiene||que de raro tiene||vicente ...      NaN   1404.0   \n",
      "\n",
      "       artist_id  platform_id  platform_name_clean  date_id   full_date  \\\n",
      "5780       788.0            3              android      215  2016-10-12   \n",
      "5782       788.0            3              android      215  2016-10-12   \n",
      "5849       788.0            3              android      215  2016-10-12   \n",
      "5875       788.0            3              android      216  2016-10-13   \n",
      "8975       788.0            3              android      282  2016-12-29   \n",
      "11780      788.0            3              android      317  2017-02-10   \n",
      "14089      788.0            3              android      365  2017-04-08   \n",
      "14852      788.0            3              android      376  2017-04-20   \n",
      "15461      788.0            3              android      385  2017-04-29   \n",
      "16084      788.0            3              android      402  2017-05-16   \n",
      "16298      788.0            4                  ios      407  2017-05-21   \n",
      "16319      788.0            4                  ios      407  2017-05-21   \n",
      "17577      788.0            3              android      433  2017-06-22   \n",
      "17596      788.0            3              android      433  2017-06-22   \n",
      "17846      788.0            3              android      437  2017-06-26   \n",
      "18033      788.0            3              android      440  2017-06-29   \n",
      "19579      788.0            3              android      449  2017-07-08   \n",
      "20946      788.0            3              android      461  2017-07-20   \n",
      "20948      788.0            3              android      461  2017-07-20   \n",
      "21382      788.0            3              android      465  2017-07-27   \n",
      "25023      788.0            3              android      502  2017-09-03   \n",
      "26563      788.0            3              android      505  2017-09-06   \n",
      "27252      788.0            3              android      507  2017-09-08   \n",
      "\n",
      "      time_id       full_time  \n",
      "5780     2103 0 days 07:29:14  \n",
      "5782     5247 0 days 07:33:15  \n",
      "5849     5310 0 days 23:36:36  \n",
      "5875     5333 0 days 06:44:55  \n",
      "8975     8006 0 days 19:41:22  \n",
      "11780   10397 0 days 20:28:55  \n",
      "14089     222 0 days 20:36:44  \n",
      "14852   12656 0 days 19:04:23  \n",
      "15461   13109 0 days 12:46:52  \n",
      "16084   13534 0 days 06:19:07  \n",
      "16298   13716 0 days 17:43:34  \n",
      "16319   13733 0 days 18:45:47  \n",
      "17577   14734 0 days 09:59:18  \n",
      "17596   14738 0 days 10:12:16  \n",
      "17846   14862 0 days 10:58:06  \n",
      "18033   15010 0 days 15:26:35  \n",
      "19579   16244 0 days 16:54:35  \n",
      "20946    7222 0 days 19:17:24  \n",
      "20948   17215 0 days 19:20:50  \n",
      "21382    9680 0 days 20:11:01  \n",
      "25023   19950 0 days 11:02:15  \n",
      "26563   20994 0 days 22:13:34  \n",
      "27252   21519 0 days 02:59:55  \n",
      "\n",
      "[23 rows x 36 columns]\n"
     ]
    }
   ],
   "source": [
    "missing = df[df[['track_id','album_id','artist_id']].isna().any(axis=1)]\n",
    "print(missing)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "06b12b6a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "track_info columns:\n",
      "         Field          Type Null  Key Default           Extra\n",
      "0    track_id           int   NO  PRI    None  auto_increment\n",
      "1  track_name  varchar(700)   NO  MUL    None                \n",
      "2    album_id           int   NO  MUL    None                \n",
      "album_info columns:\n",
      "         Field          Type Null  Key Default           Extra\n",
      "0    album_id           int   NO  PRI    None  auto_increment\n",
      "1  album_name  varchar(300)   NO         None                \n",
      "2   artist_id           int  YES  MUL    None                \n",
      "artist_info columns:\n",
      "          Field          Type Null  Key Default           Extra\n",
      "0    artist_id           int   NO  PRI    None  auto_increment\n",
      "1  artist_name  varchar(255)   NO         None                \n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sqlalchemy import create_engine\n",
    "\n",
    "engine = create_engine(\"mysql+pymysql://root:27Simran$@localhost:3306/spotify_db\")\n",
    "\n",
    "# Check columns in track_info\n",
    "track_cols = pd.read_sql(\"SHOW COLUMNS FROM track_info\", con=engine)\n",
    "print(\"track_info columns:\\n\", track_cols)\n",
    "\n",
    "# Check columns in album_info\n",
    "album_cols = pd.read_sql(\"SHOW COLUMNS FROM album_info\", con=engine)\n",
    "print(\"album_info columns:\\n\", album_cols)\n",
    "\n",
    "# Check columns in artist_info\n",
    "artist_cols = pd.read_sql(\"SHOW COLUMNS FROM artist_info\", con=engine)\n",
    "print(\"artist_info columns:\\n\", artist_cols)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "bddb1e87",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rows with missing IDs: 38\n",
      "Total rows in listening_history: 145101\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sqlalchemy import create_engine, text\n",
    "\n",
    "# ----------------------------\n",
    "# 1️⃣ Connect to MySQL\n",
    "# ----------------------------\n",
    "engine = create_engine(\"mysql+pymysql://root:27Simran$@localhost:3306/spotify_db\")\n",
    "\n",
    "# ----------------------------\n",
    "# 2️⃣ Load cleaned raw data\n",
    "# ----------------------------\n",
    "df = pd.read_sql(\"SELECT * FROM spotify_raw\", con=engine)\n",
    "\n",
    "# ----------------------------\n",
    "# 3️⃣ Load dimension tables\n",
    "# ----------------------------\n",
    "track_map = pd.read_sql(\"SELECT track_id, track_name, album_id FROM track_info\", con=engine)\n",
    "artist_map = pd.read_sql(\"SELECT artist_id, artist_name FROM artist_info\", con=engine)\n",
    "album_map = pd.read_sql(\"SELECT album_id, album_name, artist_id FROM album_info\", con=engine)\n",
    "platform_map = pd.read_sql(\"SELECT platform_id, platform_name FROM platform_info\", con=engine)\n",
    "date_map = pd.read_sql(\"SELECT date_id, full_date FROM date_info\", con=engine)\n",
    "time_map = pd.read_sql(\"SELECT time_id, full_time FROM time_info\", con=engine)\n",
    "\n",
    "# ----------------------------\n",
    "# 4️⃣ Standardize text columns for clean matching\n",
    "# ----------------------------\n",
    "for col in ['track_name','album_name','artist_name','platform']:\n",
    "    df[col + '_clean'] = df[col].str.lower().str.strip()\n",
    "\n",
    "track_map['track_name_clean'] = track_map['track_name'].str.lower().str.strip()\n",
    "album_map['album_name_clean'] = album_map['album_name'].str.lower().str.strip()\n",
    "artist_map['artist_name_clean'] = artist_map['artist_name'].str.lower().str.strip()\n",
    "platform_map['platform_name_clean'] = platform_map['platform_name'].str.lower().str.strip()\n",
    "\n",
    "# ----------------------------\n",
    "# 5️⃣ Create single key for track+album+artist\n",
    "# ----------------------------\n",
    "df['key'] = df['track_name_clean'] + '||' + df['album_name_clean'] + '||' + df['artist_name_clean']\n",
    "\n",
    "track_album_artist_map = track_map.merge(album_map, on='album_id', how='left') \\\n",
    "                                  .merge(artist_map, on='artist_id', how='left')\n",
    "\n",
    "track_album_artist_map['key'] = track_album_artist_map['track_name_clean'] + '||' + \\\n",
    "                                track_album_artist_map['album_name_clean'] + '||' + \\\n",
    "                                track_album_artist_map['artist_name_clean']\n",
    "\n",
    "# ----------------------------\n",
    "# 6️⃣ Merge IDs into raw data\n",
    "# ----------------------------\n",
    "df = df.merge(track_album_artist_map[['key','track_id','album_id','artist_id']], on='key', how='left')\n",
    "df = df.merge(platform_map[['platform_id','platform_name_clean']], left_on='platform_clean', right_on='platform_name_clean', how='left')\n",
    "df = df.merge(date_map[['date_id','full_date']], left_on='date', right_on='full_date', how='left')\n",
    "df = df.merge(time_map[['time_id','full_time']], left_on='time', right_on='full_time', how='left')\n",
    "\n",
    "# ----------------------------\n",
    "# 7️⃣ Keep only required columns\n",
    "# ----------------------------\n",
    "df_fact = df[['track_id','artist_id','album_id','platform_id','date_id','time_id',\n",
    "              'ms_played','minutes_played','hours_played','spotify_track_uri']]\n",
    "\n",
    "# ----------------------------\n",
    "# 8️⃣ Drop rows with missing IDs\n",
    "# ----------------------------\n",
    "missing = df_fact[df_fact[['track_id','artist_id','album_id','platform_id','date_id','time_id']].isna().any(axis=1)]\n",
    "print(\"Rows with missing IDs:\", len(missing))\n",
    "if len(missing) > 0:\n",
    "    df_fact = df_fact.dropna(subset=['track_id','artist_id','album_id','platform_id','date_id','time_id'])\n",
    "\n",
    "df_fact = df_fact.reset_index(drop=True)\n",
    "\n",
    "# ----------------------------\n",
    "# 9️⃣ Insert into MySQL in chunks\n",
    "# ----------------------------\n",
    "chunk_size = 5000\n",
    "# Use 'replace' for first run, then 'append' for subsequent runs\n",
    "df_fact.to_sql('listening_history', con=engine, if_exists='replace', index=False)\n",
    "\n",
    "# ----------------------------\n",
    "# 10️⃣ Verify final row count\n",
    "# ----------------------------\n",
    "with engine.connect() as conn:\n",
    "    result = conn.execute(text(\"SELECT COUNT(*) FROM listening_history\"))\n",
    "    print(\"Total rows in listening_history:\", result.scalar())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "19e2c8d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Missing values in track_info:\n",
      "✅ No missing values\n",
      "\n",
      "Missing values in album_info:\n",
      "✅ No missing values\n",
      "\n",
      "Missing values in artist_info:\n",
      "✅ No missing values\n",
      "\n",
      "Missing values in platform_info:\n",
      "✅ No missing values\n",
      "\n",
      "Missing values in date_info:\n",
      "✅ No missing values\n",
      "\n",
      "Missing values in time_info:\n",
      "✅ No missing values\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sqlalchemy import create_engine\n",
    "\n",
    "# 1️⃣ Connect to MySQL\n",
    "engine = create_engine(\"mysql+pymysql://root:27Simran$@localhost:3306/spotify_db\")\n",
    "\n",
    "# 2️⃣ List of dimension tables\n",
    "dimension_tables = [\n",
    "    'track_info',\n",
    "    'album_info',\n",
    "    'artist_info',\n",
    "    'platform_info',\n",
    "    'date_info',\n",
    "    'time_info'\n",
    "]\n",
    "\n",
    "# 3️⃣ Loop through tables and check missing values\n",
    "missing_summary = {}\n",
    "\n",
    "for table in dimension_tables:\n",
    "    df = pd.read_sql(f\"SELECT * FROM {table}\", con=engine)\n",
    "    missing_counts = df.isna().sum()\n",
    "    missing_summary[table] = missing_counts[missing_counts > 0]  # Only show columns with missing values\n",
    "\n",
    "# 4️⃣ Display missing value summary\n",
    "for table, missing in missing_summary.items():\n",
    "    print(f\"\\nMissing values in {table}:\")\n",
    "    if missing.empty:\n",
    "        print(\"✅ No missing values\")\n",
    "    else:\n",
    "        print(missing)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "9c62dfba",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Load data into power bi\n",
    "\n",
    "df.to_csv(\"spotify_cleaned_data.csv\", index=False)  # index=False avoids writing row numbers"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
